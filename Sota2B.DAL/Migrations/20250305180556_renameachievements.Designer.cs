// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sota2B.DAL.Data;

#nullable disable

namespace Sota2B.DAL.Migrations
{
    [DbContext(typeof(Sota2BContext))]
    [Migration("20250305180556_renameachievements")]
    partial class renameachievements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Sota2B.DM.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdEvent")
                        .IsUnique();

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Reward")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdProduct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUser");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Sota2B.DM.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sota2B.DM.Models.UserHasAchievement", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdAchievment")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdUser", "IdAchievment");

                    b.HasIndex("IdAchievment");

                    b.ToTable("UserHasAchievements");
                });

            modelBuilder.Entity("Sota2B.DM.Models.UserWasOnEvent", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdUser", "IdEvent");

                    b.HasIndex("IdEvent");

                    b.ToTable("UserWasOnEvents");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Achievement", b =>
                {
                    b.HasOne("Sota2B.DM.Models.Event", "Event")
                        .WithOne("Achievment")
                        .HasForeignKey("Sota2B.DM.Models.Achievement", "IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Purchase", b =>
                {
                    b.HasOne("Sota2B.DM.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sota2B.DM.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sota2B.DM.Models.UserHasAchievement", b =>
                {
                    b.HasOne("Sota2B.DM.Models.Achievement", "Achievement")
                        .WithMany("UserHasAchievment")
                        .HasForeignKey("IdAchievment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sota2B.DM.Models.User", "User")
                        .WithMany("UserHasAchievments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sota2B.DM.Models.UserWasOnEvent", b =>
                {
                    b.HasOne("Sota2B.DM.Models.Event", "Event")
                        .WithMany("UserWasOnEvent")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sota2B.DM.Models.User", "User")
                        .WithMany("UserWasOnEvent")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Achievement", b =>
                {
                    b.Navigation("UserHasAchievment");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Event", b =>
                {
                    b.Navigation("Achievment");

                    b.Navigation("UserWasOnEvent");
                });

            modelBuilder.Entity("Sota2B.DM.Models.Product", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Sota2B.DM.Models.User", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("UserHasAchievments");

                    b.Navigation("UserWasOnEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
